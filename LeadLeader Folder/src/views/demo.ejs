<div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
  <!-- Header -->
  <div class="text-center mb-8">
    <h1 class="text-4xl font-bold text-gray-900 mb-4">
      üéôÔ∏è Voice Transcription Demo
    </h1>
    <p class="text-lg text-gray-600">
      Record a voice message, and we'll transcribe it using Whisper and generate a response with Amazon Polly.
    </p>
  </div>

  <!-- Demo Card -->
  <div class="bg-white rounded-lg shadow-lg p-8 mb-8">
    <!-- Recorder Controls -->
    <div class="flex flex-col items-center space-y-4 mb-8">
      <button id="startBtn" class="px-8 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition font-medium">
        Start Recording
      </button>
      <button id="stopBtn" class="px-8 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition font-medium hidden">
        Stop Recording
      </button>
      <button id="uploadBtn" class="px-8 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition font-medium hidden">
        Upload & Transcribe
      </button>
    </div>

    <!-- Status Display -->
    <div id="status" class="text-center text-gray-600 mb-6">
      Ready to record
    </div>

    <!-- Waveform Visualization Placeholder -->
    <div id="waveform" class="hidden mb-6">
      <div class="flex items-center justify-center space-x-1 h-16">
        <div class="w-1 bg-blue-500 rounded animate-pulse" style="height: 20%"></div>
        <div class="w-1 bg-blue-500 rounded animate-pulse" style="height: 40%; animation-delay: 0.1s"></div>
        <div class="w-1 bg-blue-500 rounded animate-pulse" style="height: 60%; animation-delay: 0.2s"></div>
        <div class="w-1 bg-blue-500 rounded animate-pulse" style="height: 80%; animation-delay: 0.3s"></div>
        <div class="w-1 bg-blue-500 rounded animate-pulse" style="height: 100%; animation-delay: 0.4s"></div>
        <div class="w-1 bg-blue-500 rounded animate-pulse" style="height: 80%; animation-delay: 0.5s"></div>
        <div class="w-1 bg-blue-500 rounded animate-pulse" style="height: 60%; animation-delay: 0.6s"></div>
        <div class="w-1 bg-blue-500 rounded animate-pulse" style="height: 40%; animation-delay: 0.7s"></div>
        <div class="w-1 bg-blue-500 rounded animate-pulse" style="height: 20%; animation-delay: 0.8s"></div>
      </div>
    </div>

    <!-- Audio Playback -->
    <div id="audioContainer" class="hidden mb-6">
      <label class="block text-sm font-medium text-gray-700 mb-2">Your Recording:</label>
      <audio id="audioPlayback" controls class="w-full"></audio>
    </div>

    <!-- Results -->
    <div id="results" class="hidden">
      <div class="border-t border-gray-200 pt-6">
        <h3 class="text-lg font-semibold text-gray-900 mb-4">Results</h3>
        
        <!-- Transcription -->
        <div class="mb-6">
          <label class="block text-sm font-medium text-gray-700 mb-2">Transcription:</label>
          <div id="transcriptText" class="bg-gray-50 rounded-lg p-4 text-gray-800 whitespace-pre-wrap"></div>
        </div>

        <!-- Duration -->
        <div class="mb-6">
          <label class="block text-sm font-medium text-gray-700 mb-2">Duration:</label>
          <div id="durationText" class="text-gray-600"></div>
        </div>

        <!-- AI Response Audio -->
        <div id="responseContainer" class="hidden">
          <label class="block text-sm font-medium text-gray-700 mb-2">AI Response (Polly TTS):</label>
          <audio id="responseAudio" controls class="w-full mb-2"></audio>
          <p id="responseText" class="text-sm text-gray-600 italic"></p>
        </div>
      </div>
    </div>

    <!-- Error Display -->
    <div id="error" class="hidden bg-red-50 border border-red-200 rounded-lg p-4 text-red-800"></div>
  </div>

  <!-- Info Cards -->
  <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
    <div class="bg-blue-50 rounded-lg p-6">
      <h3 class="font-semibold text-blue-900 mb-2">üé§ Step 1: Record</h3>
      <p class="text-sm text-blue-700">Click "Start Recording" and speak clearly into your microphone.</p>
    </div>
    <div class="bg-green-50 rounded-lg p-6">
      <h3 class="font-semibold text-green-900 mb-2">üìù Step 2: Transcribe</h3>
      <p class="text-sm text-green-700">Our AI will convert your speech to text using Whisper.</p>
    </div>
    <div class="bg-purple-50 rounded-lg p-6">
      <h3 class="font-semibold text-purple-900 mb-2">üîä Step 3: Listen</h3>
      <p class="text-sm text-purple-700">Hear the AI-generated voice response via Amazon Polly.</p>
    </div>
  </div>
</div>

<script>
// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
// DEMO PAGE RECORDER - Browser-based voice recording & upload
// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

let mediaRecorder;
let audioChunks = [];
let audioBlob;

const startBtn = document.getElementById('startBtn');
const stopBtn = document.getElementById('stopBtn');
const uploadBtn = document.getElementById('uploadBtn');
const status = document.getElementById('status');
const waveform = document.getElementById('waveform');
const audioContainer = document.getElementById('audioContainer');
const audioPlayback = document.getElementById('audioPlayback');
const results = document.getElementById('results');
const errorDiv = document.getElementById('error');
const transcriptText = document.getElementById('transcriptText');
const durationText = document.getElementById('durationText');
const responseContainer = document.getElementById('responseContainer');
const responseAudio = document.getElementById('responseAudio');
const responseText = document.getElementById('responseText');

startBtn.addEventListener('click', async () => {
  try {
    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
    mediaRecorder = new MediaRecorder(stream);
    audioChunks = [];

    mediaRecorder.ondataavailable = (event) => {
      audioChunks.push(event.data);
    };

    mediaRecorder.onstop = () => {
      audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
      const audioUrl = URL.createObjectURL(audioBlob);
      audioPlayback.src = audioUrl;
      audioContainer.classList.remove('hidden');
      uploadBtn.classList.remove('hidden');
      status.textContent = 'Recording complete. Click "Upload & Transcribe" to process.';
      waveform.classList.add('hidden');
    };

    mediaRecorder.start();
    startBtn.classList.add('hidden');
    stopBtn.classList.remove('hidden');
    results.classList.add('hidden');
    errorDiv.classList.add('hidden');
    status.textContent = 'üî¥ Recording... Click "Stop" when done.';
    waveform.classList.remove('hidden');
  } catch (err) {
    showError('Microphone access denied or unavailable: ' + err.message);
  }
});

stopBtn.addEventListener('click', () => {
  mediaRecorder.stop();
  mediaRecorder.stream.getTracks().forEach(track => track.stop());
  stopBtn.classList.add('hidden');
  startBtn.classList.remove('hidden');
});

uploadBtn.addEventListener('click', async () => {
  status.textContent = '‚è≥ Uploading and transcribing...';
  uploadBtn.disabled = true;
  errorDiv.classList.add('hidden');

  const formData = new FormData();
  formData.append('audio', audioBlob, 'recording.webm');

  try {
    const response = await fetch('/upload', {
      method: 'POST',
      body: formData
    });

    if (!response.ok) {
      throw new Error(`Server error: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    
    // Display results
    results.classList.remove('hidden');
    transcriptText.textContent = data.transcript || '[No transcription available]';
    durationText.textContent = data.duration ? `${data.duration.toFixed(1)} seconds` : 'Unknown';
    
    // Display Polly response if available
    if (data.pollyAudioPath) {
      responseContainer.classList.remove('hidden');
      responseAudio.src = data.pollyAudioPath;
      responseText.textContent = data.pollyText || 'AI-generated response';
    }

    status.textContent = '‚úÖ Transcription complete!';
    uploadBtn.classList.add('hidden');
  } catch (err) {
    showError('Upload failed: ' + err.message);
  } finally {
    uploadBtn.disabled = false;
  }
});

function showError(message) {
  errorDiv.textContent = message;
  errorDiv.classList.remove('hidden');
  status.textContent = 'Error occurred';
}
</script>
